"use client"

import { useEffect, useRef, useState } from "react"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Textarea } from "@/components/ui/textarea"

declare global {
  interface Window {
    VANTA: any
    THREE: any
  }
}

export default function Home() {
  const vantaRef = useRef<HTMLDivElement>(null)
  const vantaEffect = useRef<any>(null)

  // Generator state
  const [generatorInput, setGeneratorInput] = useState("")
  const [generatorOutput, setGeneratorOutput] = useState("")
  const [isGenerating, setIsGenerating] = useState(false)
  const [generatorType, setGeneratorType] = useState("code")

  useEffect(() => {
    // Load Three.js
    const threeScript = document.createElement("script")
    threeScript.src = "https://cdnjs.cloudflare.com/ajax/libs/three.js/r134/three.min.js"
    threeScript.async = true
    document.body.appendChild(threeScript)

    threeScript.onload = () => {
      // Load Vanta.js NET effect
      const vantaScript = document.createElement("script")
      vantaScript.src = "https://cdn.jsdelivr.net/npm/vanta@latest/dist/vanta.net.min.js"
      vantaScript.async = true
      document.body.appendChild(vantaScript)

      vantaScript.onload = () => {
        if (vantaRef.current && !vantaEffect.current) {
          vantaEffect.current = window.VANTA.NET({
            el: vantaRef.current,
            THREE: window.THREE,
            mouseControls: true,
            touchControls: true,
            gyroControls: false,
            minHeight: 200.0,
            minWidth: 200.0,
            scale: 1.5,
            scaleMobile: 1.5,
            color: 0x00d9ff,
            backgroundColor: 0x0a0a0a,
            points: 25.0,
            maxDistance: 35.0,
            spacing: 20.0,
            showDots: true,
            mouseCoeffX: 2.5,
            mouseCoeffY: 2.5,
          })
        }
      }
    }

    return () => {
      if (vantaEffect.current) {
        vantaEffect.current.destroy()
      }
    }
  }, [])

  // Generator function
  const handleGenerate = async () => {
    if (!generatorInput.trim()) return

    setIsGenerating(true)

    // Simulate API call delay
    await new Promise(resolve => setTimeout(resolve, 1000))

    let generated = ""

    switch (generatorType) {
      case "code":
        generated = `// Generated by ATLANTICS.DEV
function ${generatorInput.toLowerCase().replace(/\s+/g, '_')}() {
  console.log("Hello from ${generatorInput}!");
  return "${generatorInput} generated successfully";
}

// Usage example:
${generatorInput.toLowerCase().replace(/\s+/g, '_')}();`
        break

      case "api":
        generated = `# ATLANTICS.DEV API Generator
# ${generatorInput}

POST /api/${generatorInput.toLowerCase().replace(/\s+/g, '-')}
Content-Type: application/json

{
  "name": "${generatorInput}",
  "description": "Generated API endpoint",
  "created_by": "atlantics.dev"
}

# Response
{
  "success": true,
  "data": "${generatorInput} created",
  "timestamp": "2024-01-01T00:00:00Z"
}`
        break

      case "config":
        generated = `# ATLANTICS.DEV Configuration
# Generated for: ${generatorInput}

APP_NAME="${generatorInput}"
APP_VERSION="1.0.0"
APP_AUTHOR="atlantics.dev"
APP_DESCRIPTION="Configuration for ${generatorInput}"

# Database
DB_HOST="localhost"
DB_PORT="5432"
DB_NAME="${generatorInput.toLowerCase().replace(/\s+/g, '_')}_db"

# API Keys
API_KEY="your-api-key-here"
SECRET_KEY="your-secret-key-here"`
        break

      default:
        generated = `ATLANTICS.DEV Generator Output:
${generatorInput}

Generated content for: ${generatorInput}
Created with ❤️ by atlantics.dev`
    }

    setGeneratorOutput(generated)
    setIsGenerating(false)
  }

  return (
    <div ref={vantaRef} className="relative h-screen w-full overflow-hidden">
      {/* Content overlay */}
      <div className="relative z-10 flex h-full w-full flex-col items-center justify-center px-6">
        <div className="max-w-4xl text-center space-y-8">
          {/* Badge */}
          <div className="flex justify-center">
            <Badge
              variant="outline"
              className="border-primary/50 bg-primary/10 text-primary px-4 py-2 text-sm font-mono backdrop-blur-sm"
            >
              AI-POWERED API
            </Badge>
          </div>

          {/* Main heading */}
          <h1 className="text-6xl md:text-8xl font-bold tracking-tight text-balance">
            Intelligence
            <br />
            <span className="bg-gradient-to-r from-primary via-accent to-primary bg-clip-text text-transparent animate-gradient">
              Unleashed
            </span>
          </h1>

          {/* Subheading */}
          <p className="text-xl md:text-2xl text-muted-foreground max-w-2xl mx-auto text-balance">
            Transform your applications with cutting-edge AI processing
          </p>

          {/* CTA Buttons */}
          <div className="flex flex-col sm:flex-row gap-4 justify-center items-center pt-4">
            <Button
              size="lg"
              className="bg-primary hover:bg-primary/90 text-primary-foreground px-8 py-6 text-lg font-semibold rounded-full shadow-lg shadow-primary/50 hover:shadow-xl hover:shadow-primary/60 transition-all duration-300"
            >
              Start Building
            </Button>
            <Button
              size="lg"
              variant="outline"
              className="border-primary/50 text-foreground hover:bg-primary/10 px-8 py-6 text-lg font-semibold rounded-full backdrop-blur-sm bg-transparent"
            >
              View Docs
            </Button>
          </div>

          {/* Stats */}
          <div className="grid grid-cols-3 gap-8 pt-12 max-w-2xl mx-auto">
            <div className="space-y-2">
              <div className="text-3xl md:text-4xl font-bold text-primary">99.9%</div>
              <div className="text-sm text-muted-foreground">Uptime</div>
            </div>
            <div className="space-y-2">
              <div className="text-3xl md:text-4xl font-bold text-accent">{"<50ms"}</div>
              <div className="text-sm text-muted-foreground">Latency</div>
            </div>
            <div className="space-y-2">
              <div className="text-3xl md:text-4xl font-bold text-primary">24/7</div>
              <div className="text-sm text-muted-foreground">Support</div>
            </div>
          </div>
        </div>
      </div>

      {/* ATLANTICS.DEV Generator Section */}
      <div className="relative z-10 w-full px-6 py-16">
        <div className="max-w-4xl mx-auto">
          <div className="text-center mb-8">
            <Badge
              variant="outline"
              className="border-primary/50 bg-primary/10 text-primary px-4 py-2 text-sm font-mono backdrop-blur-sm mb-4"
            >
              ATLANTICS.DEV GENERATOR
            </Badge>
            <h2 className="text-4xl md:text-5xl font-bold text-foreground mb-4">
              Generate Anything
            </h2>
            <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
              Create code, APIs, configurations and more with our AI-powered generator
            </p>
          </div>

          <Card className="bg-card/50 backdrop-blur-sm border-primary/20">
            <CardHeader>
              <CardTitle className="text-2xl text-center text-foreground">
                What would you like to generate?
              </CardTitle>
              <CardDescription className="text-center">
                Enter a name or description to generate code, APIs, or configurations
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="flex gap-2 justify-center">
                {[
                  { value: "code", label: "Code" },
                  { value: "api", label: "API" },
                  { value: "config", label: "Config" },
                ].map((type) => (
                  <Button
                    key={type.value}
                    variant={generatorType === type.value ? "default" : "outline"}
                    onClick={() => setGeneratorType(type.value)}
                    className="px-6 py-2"
                  >
                    {type.label}
                  </Button>
                ))}
              </div>

              <div className="space-y-4">
                <Input
                  placeholder={`Enter ${generatorType} name...`}
                  value={generatorInput}
                  onChange={(e) => setGeneratorInput(e.target.value)}
                  className="bg-background/50 border-primary/30 text-foreground placeholder:text-muted-foreground"
                />

                <Button
                  onClick={handleGenerate}
                  disabled={!generatorInput.trim() || isGenerating}
                  className="w-full bg-primary hover:bg-primary/90 text-primary-foreground py-3 text-lg font-semibold"
                >
                  {isGenerating ? "Generating..." : `Generate ${generatorType.toUpperCase()}`}
                </Button>
              </div>

              {generatorOutput && (
                <div className="space-y-2">
                  <label className="text-sm font-medium text-foreground">
                    Generated Output:
                  </label>
                  <Textarea
                    value={generatorOutput}
                    readOnly
                    className="min-h-[200px] bg-background/50 border-primary/30 text-foreground font-mono text-sm"
                  />
                  <div className="flex gap-2 justify-end">
                    <Button
                      variant="outline"
                      onClick={() => navigator.clipboard.writeText(generatorOutput)}
                      className="border-primary/30 text-foreground hover:bg-primary/10"
                    >
                      Copy
                    </Button>
                    <Button
                      variant="outline"
                      onClick={() => setGeneratorOutput("")}
                      className="border-primary/30 text-foreground hover:bg-primary/10"
                    >
                      Clear
                    </Button>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Footer */}
      <div className="relative z-10 w-full px-6 py-8">
        <div className="max-w-4xl mx-auto text-center">
          <p className="text-muted-foreground">
            Built with ❤️ by{" "}
            <a
              href="https://atlantics.dev"
              target="_blank"
              rel="noopener noreferrer"
              className="text-primary hover:text-accent transition-colors font-semibold"
            >
              atlantics.dev
            </a>
          </p>
        </div>
      </div>

      {/* Gradient overlay for better text visibility */}
      <div className="absolute inset-0 bg-gradient-to-b from-background/20 via-transparent to-background/40 pointer-events-none" />
    </div>
  )
}
