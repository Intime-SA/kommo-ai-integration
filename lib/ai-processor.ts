import { generateObject } from "ai"
import { openai } from "@ai-sdk/openai"
import { z } from "zod"
import type { LeadStatus, AIDecision } from "@/types/kommo"
import { logAiProcessingError, logAiPromptSent, logAiResponseReceived } from "./logger"

const aiDecisionSchema = z.object({
  currentStatus: z.enum(["Revisar", "PidioUsuario", "PidioCbuAlias", "Cargo", "NoCargo", "NoAtender"]),
  newStatus: z.enum(["Revisar", "PidioUsuario", "PidioCbuAlias", "Cargo", "NoCargo", "NoAtender"]),
  shouldChange: z.boolean(),
  reasoning: z.string(),
  confidence: z.number().min(0).max(1),
})

export async function processMessageWithAI(
  messageText: string,
  currentStatus: LeadStatus,
  talkId: string,
): Promise<AIDecision> {
  const systemMessage = `Eres un asistente de IA especializado en clasificar mensajes de clientes potenciales en un CRM (Kommo).

Tu objetivo es analizar mensajes ENTRANTES de clientes y decidir si corresponde cambiar el status del Lead.
El status refleja el punto en el flujo comercial/operativo en el que se encuentra el cliente.

üìå ESTADOS DISPONIBLES:
- "Revisar": Cliente con dudas, preguntas o solicitudes que no est√°n contempladas en los botones del men√∫ principal. Aqu√≠ requiere intervenci√≥n manual de un operador/agente humano.
- "PidioUsuario": Cliente potencial solicita un usuario/credencial para ingresar al sistema. La automatizaci√≥n se lo entrega y luego pasa a seguimiento.
- "PidioCbuAlias": Cliente solicita informaci√≥n bancaria (CBU o alias) para hacer una transferencia. Luego espera acci√≥n del operador para verificar si el cliente avanza (env√≠o de comprobante, carga, etc.).
- "Cargo": Cliente confirma o demuestra que realiz√≥ una primera carga de dinero exitosa.
- "NoCargo": Cliente que lleva tiempo sin cargar, o que env√≠a mensajes repetitivos sin concretar acci√≥n. Tambi√©n puede aplicar cuando solo interact√∫a sin intenci√≥n clara de avanzar.
- "NoAtender": Cliente no calificado: ni√±os, bromistas, molestos, vulgares, o comportamientos inapropiados. Debe marcarse para que el equipo no pierda tiempo.

üìå REGLAS DE DECISI√ìN:
1. Analiza siempre el contenido literal del mensaje, pero tambi√©n el contexto del status actual del Lead.
2. Solo cambia el status si hay una raz√≥n clara y espec√≠fica en el mensaje (ejemplo: pide usuario, env√≠a comprobante, pide CBU).
3. Si el mensaje no aporta informaci√≥n nueva, mantiene el status actual.
4. El status "Revisar" es un comod√≠n para consultas fuera del flujo autom√°tico: dudas, preguntas generales, etc.
5. El status "NoCargo" se aplica cuando hay inacci√≥n prolongada o mensajes que no generan avance (aunque sean educados).
6. El status "No atender" se aplica solo a casos claros de clientes no deseados (t√≥xicos, ni√±os, vulgares, trolls).
7. Tu razonamiento debe explicar con precisi√≥n por qu√© cambias o mantienes el status.
8. Responde siempre en espa√±ol.

üìå EJEMPLOS R√ÅPIDOS:
- Cliente dice: "¬øMe pasas el usuario?" ‚Üí newStatus = "PidioUsuario"
- Cliente dice: "Pasame cuenta" ‚Üí newStatus = "PidioCbuAlias"
- Cliente env√≠a: "Ya cargu√© $500" ‚Üí newStatus = "Cargo"
- Cliente dice: "Hola" y ya estaba en "PidioCbuAlias" ‚Üí mantener status
- Cliente dice: "No voy a cargar nada, chau" ‚Üí newStatus = "NoCargo"
- Cliente insulta o hace chistes sin sentido ‚Üí newStatus = "NoAtender"
`

  const prompt = `
Analiza este mensaje de cliente:

Mensaje: "${messageText}"
Status actual: "${currentStatus}"
Talk ID: "${talkId}"

Determina:
1. Si el status debe cambiar
2. A qu√© nuevo status (si aplica)
3. Tu razonamiento
4. Tu nivel de confianza (0-1)
      `

  try {
    // Log del prompt enviado a la AI
    logAiPromptSent(prompt, systemMessage)

    const { object } = await generateObject({
      model: openai("gpt-4o"),
      schema: aiDecisionSchema,
      system: systemMessage,
      prompt: prompt,
    })

    // Log de la respuesta de la AI
    logAiResponseReceived(object, object.confidence)

    return object
  } catch (error) {
    logAiProcessingError(error)

    // Fallback decision
    return {
      currentStatus,
      newStatus: currentStatus,
      shouldChange: false,
      reasoning: "Error en el procesamiento de IA, manteniendo status actual",
      confidence: 0,
    }
  }
}
