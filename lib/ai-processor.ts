import { generateObject } from "ai"
import { openai } from "@ai-sdk/openai"
import { z } from "zod"
import type { LeadStatus, BotAssignableStatus, AIDecision } from "@/types/kommo"
import type { ContactContext } from "@/lib/mongodb-services"
import { logAiProcessingError, logAiPromptSent, logAiResponseReceived } from "./logger"

// Schema para validar las decisiones de la IA (excluye "Cargo" por restricci√≥n de seguridad)
const aiDecisionSchema = z.object({
  currentStatus: z.enum(["Revisar", "PidioUsuario", "PidioCbuAlias", "Cargo", "NoCargo", "NoAtender", "sin-status"]),
  newStatus: z.enum(["Revisar", "PidioUsuario", "PidioCbuAlias", "NoCargo", "NoAtender", "sin-status"]),
  shouldChange: z.boolean(),
  reasoning: z.string(),
  confidence: z.number().min(0).max(1),
})

// Funci√≥n helper para formatear el contexto hist√≥rico del contacto
function formatContactContext(context: ContactContext): string {
  let contextText = `üìã CONTEXTO HIST√ìRICO DEL CONTACTO (√öltimas 24 horas):\n\n`

  // Informaci√≥n del usuario
  if (context.userInfo) {
    contextText += `üë§ INFORMACI√ìN DEL USUARIO:
- Nombre: ${context.userInfo.name}
- ID Cliente: ${context.userInfo.clientId}
- Origen: ${context.userInfo.sourceName} (${context.userInfo.source})
- Primer mensaje: "${context.userInfo.firstMessage}"
- Fecha primer contacto: ${new Date(context.userInfo.firstMessageDate).toLocaleString('es-AR')}

`
  }

  // Resumen general
  contextText += `üìä RESUMEN GENERAL:
- Total mensajes en las √∫ltimas 24h: ${context.summary.totalMessages}
- √öltima actividad: ${new Date(context.summary.lastActivity).toLocaleString('es-AR')}
- Duraci√≥n conversaci√≥n: ${context.summary.conversationDuration}
${context.summary.currentStatus ? `- Status actual: ${context.summary.currentStatus}` : '- Status actual: No determinado'}

`

  // Leads activos
  if (context.activeLeads.length > 0) {
    contextText += `üéØ LEADS ACTIVOS:\n`
    context.activeLeads.forEach((lead, index) => {
      contextText += `${index + 1}. Lead ID: ${lead.leadId}
   - Creado: ${new Date(lead.createdAt).toLocaleString('es-AR')}
   ${lead.lastActivity ? `- √öltima actividad: ${new Date(lead.lastActivity).toLocaleString('es-AR')}` : ''}\n`
    })
    contextText += '\n'
  }

  // Conversaciones activas
  if (context.activeTasks.length > 0) {
    contextText += `üí¨ CONVERSACIONES ACTIVAS:\n`
    context.activeTasks.forEach((task, index) => {
      contextText += `${index + 1}. Talk ID: ${task.talkId}
   - En trabajo: ${task.isInWork ? 'S√≠' : 'No'}
   - Le√≠do: ${task.isRead ? 'S√≠' : 'No'}
   - Creada: ${new Date(task.createdAt).toLocaleString('es-AR')}
   ${task.lastActivity ? `- √öltima actividad: ${new Date(task.lastActivity).toLocaleString('es-AR')}` : ''}\n`
    })
    contextText += '\n'
  }

  // Historial de mensajes recientes (√∫ltimos 10 para no sobrecargar)
  if (context.recentMessages.length > 0) {
    contextText += `üí≠ HISTORIAL DE MENSAJES RECIENTES:\n`
    const messagesToShow = context.recentMessages.slice(-10) // √öltimos 10 mensajes
    messagesToShow.forEach((msg, index) => {
      const direction = msg.type === 'incoming' ? '‚Üí' : '‚Üê'
      contextText += `${index + 1}. [${new Date(msg.createdAt).toLocaleString('es-AR')}] ${direction} ${msg.authorName}: "${msg.text}"\n`
    })
    contextText += '\n'
  }

  // Historial de decisiones del bot
  if (context.botActions.length > 0) {
    contextText += `ü§ñ HISTORIAL DE DECISIONES DEL BOT:\n`
    context.botActions.slice(0, 5).forEach((action, index) => { // √öltimas 5 decisiones
      contextText += `${index + 1}. Mensaje: "${action.messageText}"
   - Status anterior: ${action.aiDecision.currentStatus}
   - Status nuevo: ${action.aiDecision.newStatus}
   - ¬øCambi√≥?: ${action.aiDecision.shouldChange ? 'S√≠' : 'No'}
   - Confianza: ${(action.aiDecision.confidence * 100).toFixed(1)}%
   - Raz√≥n: ${action.aiDecision.reasoning}
   - Resultado: ${action.statusUpdateResult.success ? '‚úÖ Exitoso' : '‚ùå Fall√≥'}
   - Procesado: ${new Date(action.processingTimestamp).toLocaleString('es-AR')}\n\n`
    })
  }

  contextText += `üîç INSTRUCCIONES PARA AN√ÅLISIS:
- Considera el historial completo para entender el contexto de la conversaci√≥n
- Eval√∫a si el nuevo mensaje representa progreso o repetici√≥n
- Ten en cuenta el tiempo transcurrido y la frecuencia de mensajes
- Si el cliente est√° repitiendo solicitudes, considera "NoCargo"
- Si hay progreso claro hacia una acci√≥n (pedir usuario, CBU), actualiza el status correspondiente
- ‚ö†Ô∏è NUNCA cambies a "Cargo", incluso si el cliente confirma transferencias o env√≠a comprobantes

`

  return contextText
}

export async function processMessageWithAI(
  messageText: string,
  currentStatus: LeadStatus,
  talkId: string,
  contactContext?: ContactContext,
): Promise<AIDecision> {
  const systemMessage = `Eres un asistente de IA especializado en clasificar mensajes de clientes potenciales en un CRM (Kommo).

Tu objetivo es analizar mensajes ENTRANTES de clientes y decidir si corresponde cambiar el status del Lead.
El status refleja el punto en el flujo comercial/operativo en el que se encuentra el cliente.

‚ö†Ô∏è  **IMPORTANTE - RESTRICCI√ìN CR√çTICA**: NUNCA, BAJO NINGUNA CIRCUNSTANCIA, puedes cambiar el status a "Cargo".
Esto incluye:
- Mensajes confirmando transferencias realizadas
- Comprobantes de pago enviados
- Cualquier confirmaci√≥n de carga exitosa
- Mensajes que indiquen que ya transfirieron el dinero
El status "Cargo" SOLO puede ser establecido por procesos manuales o sistemas externos, NUNCA por este bot.

üìå ESTADOS DISPONIBLES PARA CAMBIOS:
- "sin-status": No se pudo obtener el status actual del lead, enviar a "Revisar".
- "Revisar": Cliente con dudas, preguntas o solicitudes que no est√°n contempladas en los botones del men√∫ principal. Aqu√≠ requiere intervenci√≥n manual de un operador/agente humano.
- "PidioUsuario": Cliente potencial solicita un usuario/credencial para ingresar al sistema. La automatizaci√≥n se lo entrega y luego pasa a seguimiento.
- "PidioCbuAlias": Cliente solicita informaci√≥n bancaria (CBU o alias) para hacer una transferencia. Luego espera acci√≥n del operador para verificar si el cliente avanza (env√≠o de comprobante, carga, etc.).
- "NoCargo": Cliente que lleva tiempo sin cargar, o que env√≠a mensajes repetitivos sin concretar acci√≥n. Tambi√©n puede aplicar cuando solo interact√∫a sin intenci√≥n clara de avanzar.
- "NoAtender": Cliente no calificado: ni√±os, bromistas, molestos, vulgares, o comportamientos inapropiados. Debe marcarse para que el equipo no pierda tiempo.

üìå REGLAS DE DECISI√ìN:
1. Analiza siempre el contenido literal del mensaje, pero tambi√©n el contexto del status actual del Lead.
2. Solo cambia el status si hay una raz√≥n clara y espec√≠fica en el mensaje (ejemplo: pide usuario, pide CBU).
3. Si el mensaje no aporta informaci√≥n nueva, mantiene el status actual.
4. El status "Revisar" es un comod√≠n para consultas fuera del flujo autom√°tico: dudas, preguntas generales, etc.
5. El status "NoCargo" se aplica cuando hay inacci√≥n prolongada o mensajes que no generan avance (aunque sean educados).
6. El status "No atender" se aplica solo a casos claros de clientes no deseados (t√≥xicos, ni√±os, vulgares, trolls).
7. **NUNCA** cambies a "Cargo", independientemente del mensaje recibido.
8. Si un cliente confirma que ya realiz√≥ una transferencia, mant√©n el status actual o cambia a "Revisar" para verificaci√≥n manual.
9. Tu razonamiento debe explicar con precisi√≥n por qu√© cambias o mantienes el status.
10. Responde siempre en espa√±ol.

üìå EJEMPLOS R√ÅPIDOS:
- Cliente dice: "¬øMe pasas el usuario?" ‚Üí newStatus = "PidioUsuario"
- Cliente dice: "Pasame cuenta" ‚Üí newStatus = "PidioCbuAlias"
- Cliente dice: "Hola" y ya estaba en "PidioCbuAlias" ‚Üí mantener status
- Cliente dice: "Ya cargu√© $500" ‚Üí **NO CAMBIAR A "Cargo"** ‚Üí mantener status o cambiar a "Revisar"
- Cliente dice: "No voy a cargar nada, chau" ‚Üí newStatus = "NoCargo"
- Cliente insulta o hace chistes sin sentido ‚Üí newStatus = "NoAtender"
- Cliente env√≠a comprobante de transferencia ‚Üí **NO CAMBIAR A "Cargo"** ‚Üí cambiar a "Revisar" para verificaci√≥n manual
`

  const prompt = `
Analiza este mensaje de cliente:

Mensaje: "${messageText}"
Status actual: "${currentStatus}"
Talk ID: "${talkId}"

${contactContext ? formatContactContext(contactContext) : ''}

Determina:
1. Si el status debe cambiar
2. A qu√© nuevo status (si aplica)
3. Tu razonamiento
4. Tu nivel de confianza (0-1)
      `

  try {
    // Log del prompt enviado a la AI
    logAiPromptSent(prompt, systemMessage)

    const { object } = await generateObject({
      model: openai("gpt-4o"),
      schema: aiDecisionSchema,
      system: systemMessage,
      prompt: prompt,
    })

    // Log de la respuesta de la AI
    logAiResponseReceived(object, object.confidence)

    return object
  } catch (error) {
    logAiProcessingError(error)

    // Fallback decision - si currentStatus es "Cargo", cambiar a "Revisar" para revisi√≥n manual
    const fallbackNewStatus: BotAssignableStatus = currentStatus === "Cargo" ? "Revisar" : currentStatus as BotAssignableStatus

    return {
      currentStatus,
      newStatus: fallbackNewStatus,
      shouldChange: false,
      reasoning: "Error en el procesamiento de IA, manteniendo status actual",
      confidence: 0,
    }
  }
}
